<apex:page standardController="Address__c" id="page">

    <apex:sectionheader title="AddressFinder" id="header"
                        description="Here's a simple VisualForce page demonstrating how you can integrate
                                    AddressFinder's address autocompletion JavaScript widget with your custom views."/>

    <apex:pageblock mode="new" title="Your VisualForce Page" id="block">
        <apex:form id="form">
            <apex:pageblockSection title="Address Information" id="blockSection">
                <apex:inputTextarea label="Street" id="street" rows="4" cols="28"/><br/>
                <apex:inputText label="City" id="city" size="30"/><br/>
                <apex:inputText label="State/Province" id="province" size="30"/><br/>
                <apex:inputText label="ZIP/Postal Code" id="postcode" size="30"/><br/>
                <apex:inputText label="Country" id="country" size="30"/>
            </apex:pageblockSection>
        </apex:form>
    </apex:pageblock>


    <script>

        /*
         * The AddressFinder for Salesforce plugin adds autocomplete capability for VisualForce pages.
         *
         * Below is a simple example showing how to integrate AddressFinder's JavaScript widget
         * with your custom pages.  The configuration block allows you to specify your license
         * key, country details, and the page's address fields.
         *
         * For more information view the README here:
         * https://github.com/AbleTech/addressfinder-salesforce
         *
         * VERSION 1.0.1
         *
         * Copyright (c) 2016 Abletech
         */

        /**************************** CONFIGURATION ****************************/
        // AddressFinder license key.
        var afKey = '4NDFAY69QMGCR8ULBPX3';

        // AddressFinder country details (supports NZ and AU country codes).
        var countryCode = 'NZ';
        var countryName = 'New Zealand';

        // address field elements - update these IDs to match the address fields on your page
        // (the street input element is used as the address search field)
        var streetId = 'page:block:form:blockSection:street';
        var cityId = 'page:block:form:blockSection:city';
        var provinceId = 'page:block:form:blockSection:province';
        var postcodeId = 'page:block:form:blockSection:postcode';
        var countryId = 'page:block:form:blockSection:country';

        // enable/disable debug mode (displays errors as JS alerts, else logs to console)
        var debug = true;
        /***********************************************************************/


        // initialise and configure AddressFinder widget
        var widget;
        var streetField = document.getElementById(streetId);

        initAF = function() {
            widget = new AddressFinder.Widget(
                streetField,
                afKey,
                countryCode
            );

            widget.on("result:select", function(address, metaData) {

                // country is hardcoded to match the scope of the widget
                setFieldValue(countryId, countryName);

                // get full address string from widget result
                var addressComponents = address.split(', ');
                var componentCount = addressComponents.length;

                // separate address components into city/postcode and street address
                var cityAndPostcode = addressComponents[componentCount - 1].split(' ');
                var streetAddress = addressComponents.slice(0, componentCount - 1).join('\n');

                // populate street field
                setFieldValue(streetId, streetAddress);

                // populate city and postcode fields
                var postcode = cityAndPostcode[cityAndPostcode.length - 1];
                var city = cityAndPostcode.slice(0, cityAndPostcode.length - 1).join(' ');
                setFieldValue(cityId, city);
                setFieldValue(postcodeId, postcode);

                // retrieve address region & populate province field
                setFieldValue(provinceId, metaData.region);

                // remove focus from street field
                streetField.blur();
            });
        };

        // load widget
        document.addEventListener("DOMContentLoaded", (function(event) {
            var script = document.createElement('script');
            script.src = '//api.addressfinder.io/assets/v3/widget.js';
            script.async = true;
            script.onload = event;
            document.body.appendChild(script);
        })(initAF));

        var setFieldValue = function(elementId, value) {

            // update field value
            var field = document.getElementById(elementId);
            if (field) {
                field.value = value;
                return;
            }

            // handle field not found
            var errorMessage = "AddressFinder Error: Attempted to update value for field that could not be found.\n"
                                + "\nField ID: \t" + elementId
                                + "\nValue: \t" + value;
            if(debug){
                alert(errorMessage);
            } else {
                if (window.console) {
                    console.log(errorMessage);
                }
            }
        }

    </script>
</apex:page>
